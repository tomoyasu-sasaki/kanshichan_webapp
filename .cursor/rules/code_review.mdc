---
description: 
globs: 
alwaysApply: false
---
# 🔍 KanshiChan コードレビュー専用ルール

## 📋 このルールの目的
KanshiChan（監視ちゃん）プロジェクトにおけるコードレビューを効率的かつ品質高く実行するための専用ルールです。

## 🎯 コードレビュー方針

### 📌 必須確認事項
コードレビュー開始前に以下の規約を必ず参照してください：
- **[project_rules/main_rules.yaml](mdc:project_rules/main_rules.yaml)** - プロジェクト全体規約
- **[project_rules/backend_rules.yaml](mdc:project_rules/backend_rules.yaml)** - Python/Flask 規約
- **[project_rules/frontend_rules.yaml](mdc:project_rules/frontend_rules.yaml)** - React/TypeScript 規約
- **[project_rules/ai_ml_rules.yaml](mdc:project_rules/ai_ml_rules.yaml)** - AI/ML 規約

### 🔍 レビュー観点の優先順位
1. **セキュリティ** - 脆弱性、認証・認可、データ保護
2. **パフォーマンス** - AI処理15+ FPS, API応答<200ms, バンドル<2MB
3. **規約遵守** - コーディング規約、命名規則、構造規約
4. **品質** - テストカバレッジ80%+、型安全性、エラーハンドリング
5. **保守性** - 可読性、モジュール化、文書化

---

## 🔄 コードレビュープロセス

### 1. レビュー準備（5分）
```markdown
### レビュー対象情報
- **PR/MR番号**: [番号を記載]
- **変更概要**: [変更内容の簡潔な説明]
- **影響範囲**: [Backend/Frontend/AI-ML/全体]
- **破壊的変更**: [有/無]
- **テスト追加**: [有/無]
```

### 2. 自動チェック確認（必須）
```bash
# 自動チェック実行状況確認
- [ ] GitHub Actions CI/CD パス
- [ ] 型チェック（mypy, TypeScript） パス
- [ ] リント（Black, Flake8, ESLint） パス
- [ ] テスト（pytest, Jest） パス
- [ ] セキュリティスキャン パス
```

### 3. 手動レビュー実行

#### 🔐 セキュリティレビュー（最優先）
**チェックポイント**:
- [ ] SQLインジェクション対策
- [ ] XSS対策（React要素の適切なエスケープ）
- [ ] CSRF対策（APIトークン管理）
- [ ] 機密情報の漏洩（ログ、コメント、ハードコード）
- [ ] 入力値検証（フロント・バック両方）
- [ ] 認証・認可の適切な実装
- [ ] ファイルアップロードの安全性
- [ ] 外部API呼び出しの安全性

```python
# ❌ セキュリティ問題例
def get_user_data(user_id):
    query = f"SELECT * FROM users WHERE id = {user_id}"  # SQLインジェクション脆弱性
    
# ✅ 安全な実装
def get_user_data(user_id: int) -> Optional[Dict[str, Any]]:
    query = "SELECT * FROM users WHERE id = %s"
    result = db.execute(query, (user_id,))
```

#### ⚡ パフォーマンスレビュー
**Backend (Python/Flask)**:
- [ ] API応答時間 <200ms の達成可能性
- [ ] データベースクエリの効率性（N+1問題等）
- [ ] メモリ使用量の適切性
- [ ] 並列処理の適切な実装
- [ ] キャッシュ戦略の妥当性

**Frontend (React/TypeScript)**:
- [ ] バンドルサイズ <2MB の維持
- [ ] 不要なre-renderの防止（useMemo, useCallback）
- [ ] 遅延読み込み（lazy loading）の活用
- [ ] 画像・動画の最適化
- [ ] メモリリークの防止

**AI/ML**:
- [ ] 15+ FPS の達成可能性
- [ ] GPU利用効率の最適化
- [ ] メモリ使用量の管理
- [ ] 並列処理の効率性
- [ ] モデル読み込みの最適化

#### 📏 規約遵守レビュー
**命名規則**:
- [ ] Python: snake_case（変数・関数）、PascalCase（クラス）
- [ ] TypeScript: camelCase（変数・関数）、PascalCase（型・コンポーネント）
- [ ] ファイル名: kebab-case（フロント）、snake_case（バック）
- [ ] 定数: UPPER_SNAKE_CASE

**構造規約**:
- [ ] ディレクトリ構造の適切性
- [ ] ファイル配置の妥当性
- [ ] 責務分離の適切性
- [ ] 依存関係の方向性

**コーディング規約**:
- [ ] インデント統一（Python: 4スペース、TS: 2スペース）
- [ ] 行長制限（Python: 88文字、TS: 100文字）
- [ ] import文の整理と順序
- [ ] コメント・docstringの適切性

#### 🧪 品質レビュー
**型安全性**:
- [ ] Python: Type hint 100%対応
- [ ] TypeScript: strict mode対応
- [ ] any型の使用回避
- [ ] Optional/Union型の適切な使用

**エラーハンドリング**:
- [ ] 例外処理の適切な実装
- [ ] エラーメッセージの適切性
- [ ] ログ出力の統一性
- [ ] フェイルセーフの実装

**テスト**:
- [ ] テストカバレッジ 80%以上
- [ ] 単体テストの適切性
- [ ] 統合テストの必要性
- [ ] エッジケースのテスト

### 4. AI/ML専用レビュー
**YOLO物体検出**:
- [ ] モデル精度の適切性
- [ ] 検出閾値の妥当性
- [ ] バウンディングボックスの精度
- [ ] フレーム処理の効率性

**MediaPipe姿勢検出**:
- [ ] ランドマーク検出精度
- [ ] リアルタイム性の確保
- [ ] エラー時の適切な処理
- [ ] リソース使用量の最適化

---

## 📊 レビュー基準

### ✅ 承認条件
- [ ] **セキュリティ**: 脆弱性なし
- [ ] **パフォーマンス**: 全基準クリア
  - [ ] AI処理: 15+ FPS
  - [ ] API応答: <200ms  
  - [ ] JSバンドル: <2MB
- [ ] **品質**: テストカバレッジ80%以上
- [ ] **規約**: 全規約遵守
- [ ] **文書**: 必要なドキュメント更新

### ⚠️ 条件付き承認
軽微な修正で解決可能な問題のみ存在する場合
- コメント・docstringの不備
- 軽微な命名規則違反
- 非必須のリファクタリング提案

### ❌ 却下条件
- セキュリティ脆弱性の存在
- パフォーマンス基準未達成
- 重大な規約違反
- テストカバレッジ不足
- 破壊的変更への事前承認なし

---

## 💬 レビューコメントガイドライン

### 🎯 効果的なコメント例

#### 問題指摘
```markdown
**🔐 セキュリティ懸念**
この実装ではSQLインジェクションの脆弱性があります。
プレースホルダーを使用してください。

**修正例**:
```python
# 修正前
query = f"SELECT * FROM users WHERE id = {user_id}"

# 修正後  
query = "SELECT * FROM users WHERE id = %s"
result = db.execute(query, (user_id,))
```

#### 改善提案
```markdown
**⚡ パフォーマンス改善提案**
この処理は毎レンダリング時に実行されており、パフォーマンスに影響する可能性があります。
`useMemo` の使用を検討してください。

**改善例**:
```typescript
// 改善前
const expensiveValue = computeExpensiveValue(props.data);

// 改善後
const expensiveValue = useMemo(() => 
  computeExpensiveValue(props.data), 
  [props.data]
);
```

#### 規約違反
```markdown
**📏 命名規則違反**
変数名がcamelCaseになっていません。
規約に従って修正してください。

**修正例**:
```typescript
// 修正前
const user_data = getUserData();

// 修正後
const userData = getUserData();
```

### 🚫 避けるべきコメント例
- ❌ "これは良くない" （具体性がない）
- ❌ "設計を見直して" （代案がない）
- ❌ "動くけど..." （問題が不明確）

---

## 📋 レビューチェックリスト

### 🐍 Python/Flask レビューチェックリスト
```markdown
#### 基本事項
- [ ] PEP 8 準拠（Black適用済み）
- [ ] Type hint 100%対応
- [ ] docstring 記述（Google Style）
- [ ] import文の整理
- [ ] 不要なコメント・デバッグコード削除

#### セキュリティ
- [ ] SQLインジェクション対策
- [ ] 入力値検証実装
- [ ] 機密情報のハードコード回避
- [ ] 適切なエラーメッセージ（情報漏洩防止）

#### パフォーマンス
- [ ] データベースクエリ効率化
- [ ] 適切なキャッシュ戦略
- [ ] メモリリーク防止
- [ ] 並列処理の適切な実装

#### テスト
- [ ] 単体テスト実装（カバレッジ80%+）
- [ ] エッジケーステスト
- [ ] モック・フィクスチャの適切な使用
- [ ] テストデータの適切な管理
```

### ⚛️ React/TypeScript レビューチェックリスト
```markdown
#### 基本事項
- [ ] TypeScript strict mode対応
- [ ] ESLint・Prettier適用済み
- [ ] コンポーネント名PascalCase
- [ ] Props型定義完備
- [ ] 不要なconsole.log削除

#### パフォーマンス
- [ ] useMemo・useCallback適切使用
- [ ] 不要なre-render防止
- [ ] 遅延読み込み実装
- [ ] バンドルサイズ<2MB維持

#### アクセシビリティ
- [ ] aria属性適切設定
- [ ] キーボードナビゲーション対応
- [ ] 色覚異常対応
- [ ] スクリーンリーダー対応

#### UI/UX
- [ ] Chakra UI設計システム準拠
- [ ] レスポンシブデザイン
- [ ] 適切なローディング状態
- [ ] エラー状態の適切な表示
```

### 🤖 AI/ML レビューチェックリスト
```markdown
#### パフォーマンス
- [ ] 15+ FPS達成可能性
- [ ] GPU利用効率化
- [ ] メモリ使用量最適化
- [ ] 並列処理実装

#### 精度・品質
- [ ] 検出精度の妥当性
- [ ] 閾値設定の適切性
- [ ] エラー時の適切な処理
- [ ] ログ出力の充実

#### 保守性
- [ ] モデル設定の外部化
- [ ] 設定値の適切な管理
- [ ] エラーハンドリング
- [ ] パフォーマンス監視
```

---

## 📝 レビュー完了報告テンプレート

```markdown
# 🔍 コードレビュー完了報告

## 📋 概要
- **PR/MR**: [番号・タイトル]
- **レビュアー**: [レビュアー名]
- **レビュー日時**: [日時]
- **レビュー時間**: [所要時間]

## 🎯 レビュー結果
### 総合評価
- [ ] ✅ 承認
- [ ] ⚠️ 条件付き承認
- [ ] ❌ 修正要求

### 検出事項
#### 🔐 セキュリティ
- 検出数: [数]
- 重要度: [High/Medium/Low]
- 対応状況: [修正済み/修正中/未対応]

#### ⚡ パフォーマンス  
- 検出数: [数]
- 重要度: [High/Medium/Low]
- 対応状況: [修正済み/修正中/未対応]

#### 📏 規約遵守
- 検出数: [数]
- 重要度: [High/Medium/Low]
- 対応状況: [修正済み/修正中/未対応]

#### 🧪 品質
- テストカバレッジ: [%]
- 型エラー数: [数]
- その他: [記載]

## 💡 改善提案
1. [提案1]
2. [提案2]
...

## 📚 学習ポイント
- [チーム全体で共有すべき学習事項]
- [今後注意すべきポイント]

## ✅ 次回レビューでの注意点
- [継続監視すべき項目]
- [新しく追加すべきチェックポイント]
```

---

## 🚀 継続的改善

### レビュー品質向上
- **月次**: レビュー効率と品質の振り返り
- **四半期**: チェックリスト更新と追加
- **半年**: レビュープロセス全体の見直し

### メトリクス収集
- レビュー時間の計測
- 検出事項の分類・分析
- レビュー後不具合の追跡
- コードレビューによる品質改善効果の測定

このコードレビュールールに従い、KanshiChanプロジェクトの品質と安全性を確保していきます。
